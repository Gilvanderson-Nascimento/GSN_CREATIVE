/**
 * @fileoverview Firestore Security Rules for MarketEase Grocery Store App
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for sales and sale items,
 * public read access for products, pricing configurations, customers, and system configurations,
 * and owner-only write access for those same top-level collections.
 *
 * Data Structure:
 * - /products/{productId}: Public product information.
 * - /pricing_configurations/{pricingConfigurationId}: Pricing configurations linked to products.
 * - /customers/{customerId}: Customer information.
 * - /users/{userId}/sales/{saleId}: Sales data owned by a specific user.
 * - /users/{userId}/sales/{saleId}/sale_items/{saleItemId}: Sale items associated with a specific sale.
 * - /products/{productId}/stock_movements/{stockMovementId}: Stock movements related to a specific product.
 * - /system_configurations/{systemConfigurationId}: System-wide configurations.
 *
 * Key Security Decisions:
 * - Public read access for product, pricing, customer, and system configuration data.
 * - Strict ownership model for sales and sale items under the /users/{userId} path.
 * - Owner-only writes for products, pricing configurations, customers, and system configurations.
 *
 * Denormalization for Authorization:
 * Not applicable in this ruleset based on the given data structure and requirements.
 *
 * Structural Segregation:
 * Uses separate collections for public (products, pricing, customers, system configurations) and private (sales, sale_items) data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows anyone to read product information, but only owners to create, update, or delete.
     * @path /products/{productId}
     * @allow (get, list): Anyone can read product information.
     * @allow (create): Only the owner (specified by authorId) can create a product, and authorId must match the user's UID.
     * @allow (update, delete): Only the owner (specified by authorId) can update or delete a product.
     * @deny (create): A user tries to create a product with an authorId that doesn't match their UID.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.id == productId;
      allow update, delete: if request.auth != null && resource.data.id == productId;
    }

    /**
     * @description Allows anyone to read pricing configurations, but only owners to create, update, or delete.
     * @path /pricing_configurations/{pricingConfigurationId}
     * @allow (get, list): Anyone can read pricing configuration information.
     * @allow (create): Only the owner (specified by authorId) can create a pricing configuration, and authorId must match the user's UID.
     * @allow (update, delete): Only the owner (specified by authorId) can update or delete a pricing configuration.
     * @deny (create): A user tries to create a pricing configuration with an authorId that doesn't match their UID.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /pricing_configurations/{pricingConfigurationId} {
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.id == pricingConfigurationId;
      allow update, delete: if request.auth != null && resource.data.id == pricingConfigurationId;
    }

    /**
     * @description Allows anyone to read customer information, but only owners to create, update, or delete.
     * @path /customers/{customerId}
     * @allow (get, list): Anyone can read customer information.
     * @allow (create): Only the owner (specified by authorId) can create a customer, and authorId must match the user's UID.
     * @allow (update, delete): Only the owner (specified by authorId) can update or delete a customer.
     * @deny (create): A user tries to create a customer with an authorId that doesn't match their UID.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /customers/{customerId} {
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.id == customerId;
      allow update, delete: if request.auth != null && resource.data.id == customerId;
    }

    /**
     * @description Allows the owner to manage their own sales data.
     * @path /users/{userId}/sales/{saleId}
     * @allow (get, list): The owner can read their own sales data.
     * @allow (create): The owner can create sales data if the userId in the path matches their UID.
     * @allow (update, delete): The owner can update or delete their own sales data.
     * @deny (create): A user tries to create sales data under another user's ID.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/sales/{saleId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == saleId;
      allow update, delete: if isOwner(userId) && resource.data.id == saleId;
    }

    /**
     * @description Allows the owner to manage their own sale items data.
     * @path /users/{userId}/sales/{saleId}/sale_items/{saleItemId}
     * @allow (get, list): The owner can read their own sale items data.
     * @allow (create): The owner can create sale items data if the userId in the path matches their UID.
     * @allow (update, delete): The owner can update or delete their own sale items data.
     * @deny (create): A user tries to create sale items data under another user's ID.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/sales/{saleId}/sale_items/{saleItemId} {
      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.id == saleItemId;
      allow update, delete: if isOwner(userId) && resource.data.id == saleItemId;
    }

    /**
     * @description Allows anyone to read stock movement information, but only owners to create, update, or delete.
     * @path /products/{productId}/stock_movements/{stockMovementId}
     * @allow (get, list): Anyone can read stock movement information.
     * @allow (create): Only the owner (specified by authorId) can create a stock movement, and authorId must match the user's UID.
     * @allow (update, delete): Only the owner (specified by authorId) can update or delete a stock movement.
     * @deny (create): A user tries to create a stock movement with an authorId that doesn't match their UID.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /products/{productId}/stock_movements/{stockMovementId} {
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.id == stockMovementId;
      allow update, delete: if request.auth != null && resource.data.id == stockMovementId;
    }

    /**
     * @description Allows anyone to read system configuration information, but only owners to create, update, or delete.
     * @path /system_configurations/{systemConfigurationId}
     * @allow (get, list): Anyone can read system configuration information.
     * @allow (create): Only the owner (specified by authorId) can create a system configuration, and authorId must match the user's UID.
     * @allow (update, delete): Only the owner (specified by authorId) can update or delete a system configuration.
     * @deny (create): A user tries to create a system configuration with an authorId that doesn't match their UID.
     * @principle Enforces document ownership for writes, allows public reads.
     */
    match /system_configurations/{systemConfigurationId} {
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.id == systemConfigurationId;
      allow update, delete: if request.auth != null && resource.data.id == systemConfigurationId;
    }
  }

  // Helper function to determine if the user is the owner
  function isOwner(userId) {
    return request.auth != null && request.auth.uid == userId;
  }
}